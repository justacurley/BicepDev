{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1124.51302",
      "templateHash": "9362549761279437922"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name to be used for the Application Gateway."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "WAF_Medium",
      "allowedValues": [
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large",
        "WAF_Medium",
        "WAF_Large",
        "Standard_v2",
        "WAF_v2"
      ],
      "metadata": {
        "description": "Optional. The name of the SKU for the Application Gateway."
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "maxValue": 10,
      "minValue": 1,
      "metadata": {
        "description": "Optional. The number of Application instances to be configured."
      }
    },
    "http2Enabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables HTTP/2 support."
      }
    },
    "frontendPublicIpResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. PublicIP Resource ID used in Public Frontend."
      }
    },
    "firewallPolicyId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource ID of shared firewall policy."
      }
    },
    "frontendPrivateIpAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The private IP within the Application Gateway subnet to be used as frontend private address.",
        "limitations": "The IP must be available in the configured subnet. If empty, allocation method will be set to dynamic. Once a method (static or dynamic) has been configured, it cannot be changed"
      }
    },
    "vNetName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Virtual Network where the Application Gateway will be deployed."
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of Gateway Subnet Name where the Application Gateway will be deployed."
      }
    },
    "subnetId": {
      "type": "string"
    },
    "vNetResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. The name of the Virtual Network Resource Group where the Application Gateway will be deployed."
      }
    },
    "vNetSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "Optional. The Subscription ID of the Virtual Network where the Application Gateway will be deployed."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "gatewayIpConfigurationName": {
      "type": "string",
      "defaultValue": "gatewayIpConfiguration01",
      "metadata": {
        "description": "Optional. Application Gateway IP configuration name."
      }
    },
    "sslCertificateName": {
      "type": "string",
      "defaultValue": "sslCertificate01",
      "metadata": {
        "description": "Optional. SSL certificate reference name for a certificate stored in the Key Vault to configure the HTTPS listeners."
      }
    },
    "sslCertificateKeyVaultSecretId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Secret ID of the SSL certificate stored in the Key Vault that will be used to configure the HTTPS listeners."
      }
    },
    "backendPools": {
      "type": "array",
      "metadata": {
        "description": "Required. The backend pools to be configured."
      }
    },
    "backendHttpConfigurations": {
      "type": "array",
      "metadata": {
        "description": "Required. The backend HTTP settings to be configured. These HTTP settings will be used to rewrite the incoming HTTP requests for the backend pools."
      }
    },
    "probes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The backend HTTP settings probes to be configured."
      }
    },
    "frontendHttpListeners": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Required. The frontend http listeners to be configured."
      }
    },
    "frontendHttpsListeners": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Required. The frontend HTTPS listeners to be configured."
      }
    },
    "frontendHttpRedirects": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The http redirects to be configured. Each redirect will route http traffic to a predefined frontEnd HTTPS listener."
      }
    },
    "routingRules": {
      "type": "array",
      "metadata": {
        "description": "Required. The routing rules to be configured. These rules will be used to route requests from frontend listeners to backend pools using a backend HTTP configuration."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "workspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of log analytics."
      }
    },
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered."
      }
    },
    "logsToEnable": {
      "type": "array",
      "defaultValue": [
        "ApplicationGatewayAccessLog",
        "ApplicationGatewayPerformanceLog",
        "ApplicationGatewayFirewallLog"
      ],
      "allowedValues": [
        "ApplicationGatewayAccessLog",
        "ApplicationGatewayPerformanceLog",
        "ApplicationGatewayFirewallLog"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "metricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('logsToEnable'))]",
        "input": {
          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('metricsToEnable'))]",
        "input": {
          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "backendAddressPools",
        "count": "[length(parameters('backendPools'))]",
        "input": {
          "name": "[parameters('backendPools')[copyIndex('backendAddressPools')].backendPoolName]",
          "type": "Microsoft.Network/applicationGateways/backendAddressPools",
          "properties": {
            "backendAddresses": "[if(contains(parameters('backendPools')[copyIndex('backendAddressPools')], 'BackendAddresses'), parameters('backendPools')[copyIndex('backendAddressPools')].BackendAddresses, createArray())]"
          }
        }
      },
      {
        "name": "probes_var",
        "count": "[length(parameters('probes'))]",
        "input": {
          "name": "[format('{0}Probe', parameters('probes')[copyIndex('probes_var')].backendHttpConfigurationName)]",
          "type": "Microsoft.Network/applicationGateways/probes",
          "properties": {
            "protocol": "[parameters('probes')[copyIndex('probes_var')].protocol]",
            "host": "[parameters('probes')[copyIndex('probes_var')].host]",
            "path": "[parameters('probes')[copyIndex('probes_var')].path]",
            "interval": "[if(contains(parameters('probes')[copyIndex('probes_var')], 'interval'), parameters('probes')[copyIndex('probes_var')].interval, 30)]",
            "timeout": "[if(contains(parameters('probes')[copyIndex('probes_var')], 'timeout'), parameters('probes')[copyIndex('probes_var')].timeout, 30)]",
            "unhealthyThreshold": "[if(contains(parameters('probes')[copyIndex('probes_var')], 'timeout'), parameters('probes')[copyIndex('probes_var')].unhealthyThreshold, 3)]",
            "minServers": "[if(contains(parameters('probes')[copyIndex('probes_var')], 'timeout'), parameters('probes')[copyIndex('probes_var')].minServers, 0)]",
            "match": {
              "body": "[if(contains(parameters('probes')[copyIndex('probes_var')], 'timeout'), parameters('probes')[copyIndex('probes_var')].body, '')]",
              "statusCodes": "[parameters('probes')[copyIndex('probes_var')].statusCodes]"
            }
          }
        }
      },
      {
        "name": "backendHttpConfigurations_var",
        "count": "[length(parameters('backendHttpConfigurations'))]",
        "input": {
          "name": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].backendHttpConfigurationName]",
          "properties": {
            "port": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].port]",
            "protocol": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].protocol]",
            "cookieBasedAffinity": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].cookieBasedAffinity]",
            "pickHostNameFromBackendAddress": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].pickHostNameFromBackendAddress]",
            "probeEnabled": "[parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].probeEnabled]",
            "probe": "[if(bool(parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].probeEnabled), json(format('{{\"id\": \"{0}/probes/{1}Probe\"}}', variables('applicationGatewayResourceId'), parameters('backendHttpConfigurations')[copyIndex('backendHttpConfigurations_var')].backendHttpConfigurationName)), null())]"
          }
        }
      },
      {
        "name": "frontendHttpsPorts",
        "count": "[length(parameters('frontendHttpsListeners'))]",
        "input": {
          "name": "[format('port{0}', parameters('frontendHttpsListeners')[copyIndex('frontendHttpsPorts')].port)]",
          "properties": {
            "Port": "[parameters('frontendHttpsListeners')[copyIndex('frontendHttpsPorts')].port]"
          }
        }
      },
      {
        "name": "frontendHttpsListeners_var",
        "count": "[length(parameters('frontendHttpsListeners'))]",
        "input": {
          "name": "[parameters('frontendHttpsListeners')[copyIndex('frontendHttpsListeners_var')].frontendListenerName]",
          "properties": {
            "FrontendIPConfiguration": {
              "id": "[format('{0}/frontendIPConfigurations/{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpsListeners')[copyIndex('frontendHttpsListeners_var')].frontendIPType)]"
            },
            "FrontendPort": {
              "id": "[format('{0}/frontendPorts/port{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpsListeners')[copyIndex('frontendHttpsListeners_var')].port)]"
            },
            "Protocol": "https",
            "SslCertificate": {
              "id": "[format('{0}/sslCertificates/{1}', variables('applicationGatewayResourceId'), parameters('sslCertificateName'))]"
            }
          }
        }
      },
      {
        "name": "frontendHttpPorts",
        "count": "[length(parameters('frontendHttpListeners'))]",
        "input": {
          "name": "[format('port{0}', parameters('frontendHttpListeners')[copyIndex('frontendHttpPorts')].port)]",
          "properties": {
            "Port": "[parameters('frontendHttpListeners')[copyIndex('frontendHttpPorts')].port]"
          }
        }
      },
      {
        "name": "frontendHttpListeners_var",
        "count": "[length(parameters('frontendHttpListeners'))]",
        "input": {
          "name": "[parameters('frontendHttpListeners')[copyIndex('frontendHttpListeners_var')].frontendListenerName]",
          "properties": {
            "FrontendIPConfiguration": {
              "id": "[format('{0}/frontendIPConfigurations/{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpListeners')[copyIndex('frontendHttpListeners_var')].frontendIPType)]"
            },
            "FrontendPort": {
              "id": "[format('{0}/frontendPorts/port{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpListeners')[copyIndex('frontendHttpListeners_var')].port)]"
            },
            "Protocol": "http"
          }
        }
      },
      {
        "name": "httpsRequestRoutingRules",
        "count": "[length(parameters('routingRules'))]",
        "input": {
          "name": "[format('{0}-{1}-{2}', parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].frontendListenerName, parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendHttpConfigurationName, parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendHttpConfigurationName)]",
          "properties": {
            "RuleType": "Basic",
            "httpListener": {
              "id": "[format('{0}/httpListeners/{1}', variables('applicationGatewayResourceId'), parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].frontendListenerName)]"
            },
            "backendAddressPool": {
              "id": "[format('{0}/backendAddressPools/{1}', variables('applicationGatewayResourceId'), parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendPoolName)]"
            },
            "backendHttpSettings": {
              "id": "[format('{0}/backendHttpSettingsCollection/{1}', variables('applicationGatewayResourceId'), parameters('routingRules')[copyIndex('httpsRequestRoutingRules')].backendHttpConfigurationName)]"
            }
          }
        }
      },
      {
        "name": "frontendHttpRedirectPorts",
        "count": "[length(parameters('frontendHttpRedirects'))]",
        "input": {
          "name": "[format('port{0}', parameters('frontendHttpRedirects')[copyIndex('frontendHttpRedirectPorts')].port)]",
          "properties": {
            "Port": "[parameters('frontendHttpRedirects')[copyIndex('frontendHttpRedirectPorts')].port]"
          }
        }
      },
      {
        "name": "frontendHttpRedirects_var",
        "count": "[length(parameters('frontendHttpRedirects'))]",
        "input": {
          "name": "[format('{0}{1}', variables('httpListenerhttpRedirectNamePrefix'), parameters('frontendHttpRedirects')[copyIndex('frontendHttpRedirects_var')].port)]",
          "properties": {
            "FrontendIPConfiguration": {
              "id": "[format('{0}/frontendIPConfigurations/{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpRedirects')[copyIndex('frontendHttpRedirects_var')].frontendIPType)]"
            },
            "FrontendPort": {
              "id": "[format('{0}/frontendPorts/port{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpRedirects')[copyIndex('frontendHttpRedirects_var')].port)]"
            },
            "Protocol": "http"
          }
        }
      },
      {
        "name": "httpRequestRoutingRules",
        "count": "[length(parameters('frontendHttpRedirects'))]",
        "input": {
          "name": "[format('{0}{1}-{2}', variables('requestRoutingRuleHttpRedirectNamePrefix'), parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].port, parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].frontendListenerName)]",
          "properties": {
            "RuleType": "Basic",
            "httpListener": {
              "id": "[format('{0}/httpListeners/{1}{2}', variables('applicationGatewayResourceId'), variables('httpListenerhttpRedirectNamePrefix'), parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].port)]"
            },
            "redirectConfiguration": {
              "id": "[format('{0}/redirectConfigurations/{1}{2}', variables('applicationGatewayResourceId'), variables('redirectConfigurationsHttpRedirectNamePrefix'), parameters('frontendHttpRedirects')[copyIndex('httpRequestRoutingRules')].port)]"
            }
          }
        }
      },
      {
        "name": "httpRedirectConfigurations",
        "count": "[length(parameters('frontendHttpRedirects'))]",
        "input": {
          "name": "[format('{0}{1}', variables('redirectConfigurationsHttpRedirectNamePrefix'), parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].port)]",
          "properties": {
            "redirectType": "Permanent",
            "includePath": true,
            "includeQueryString": true,
            "requestRoutingRules": [
              {
                "id": "[format('{0}/requestRoutingRules/{1}{2}-{3}', variables('applicationGatewayResourceId'), variables('requestRoutingRuleHttpRedirectNamePrefix'), parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].port, parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].frontendListenerName)]"
              }
            ],
            "targetListener": {
              "id": "[format('{0}/httpListeners/{1}', variables('applicationGatewayResourceId'), parameters('frontendHttpRedirects')[copyIndex('httpRedirectConfigurations')].frontendListenerName)]"
            }
          }
        }
      }
    ],
    "applicationGatewayResourceId": "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]",
    "subnetResourceId": "[if(empty(parameters('subnetId')), resourceId(parameters('vNetSubscriptionId'), parameters('vNetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vNetName'), parameters('subnetName')), parameters('subnetId'))]",
    "frontendPublicIPConfigurationName": "public",
    "frontendPrivateIPConfigurationName": "private",
    "frontendPrivateIPDynamicConfiguration": {
      "privateIPAllocationMethod": "Dynamic",
      "subnet": {
        "id": "[variables('subnetResourceId')]"
      }
    },
    "frontendPrivateIPStaticConfiguration": {
      "privateIPAllocationMethod": "Static",
      "privateIPAddress": "[parameters('frontendPrivateIpAddress')]",
      "subnet": {
        "id": "[variables('subnetResourceId')]"
      }
    },
    "redirectConfigurationsHttpRedirectNamePrefix": "httpRedirect",
    "httpListenerhttpRedirectNamePrefix": "httpRedirect",
    "requestRoutingRuleHttpRedirectNamePrefix": "httpRedirect",
    "wafConfiguration": {
      "enabled": true,
      "firewallMode": "Detection",
      "ruleSetType": "OWASP",
      "ruleSetVersion": "3.0",
      "disabledRuleGroups": [],
      "requestBodyCheck": true,
      "maxRequestBodySizeInKb": "128"
    },
    "sslCertificates": [
      {
        "name": "[parameters('sslCertificateName')]",
        "properties": {
          "keyVaultSecretId": "[parameters('sslCertificateKeyVaultSecretId')]"
        }
      }
    ],
    "frontendPorts": "[union(if(empty(parameters('frontendHttpListeners')), parameters('frontendHttpListeners'), variables('frontendHttpPorts')), if(empty(parameters('frontendHttpsListeners')), parameters('frontendHttpsListeners'), variables('frontendHttpsPorts')), if(empty(parameters('frontendHttpRedirects')), parameters('frontendHttpRedirects'), variables('frontendHttpRedirectPorts')))]",
    "httpListeners": "[concat(if(empty(parameters('frontendHttpListeners')), parameters('frontendHttpListeners'), variables('frontendHttpListeners_var')), if(empty(parameters('frontendHttpsListeners')), parameters('frontendHttpsListeners'), variables('frontendHttpsListeners_var')), if(empty(parameters('frontendHttpRedirects')), parameters('frontendHttpRedirects'), variables('frontendHttpRedirects_var')))]",
    "redirectConfigurations": "[if(empty(parameters('frontendHttpRedirects')), parameters('frontendHttpRedirects'), variables('httpRedirectConfigurations'))]",
    "requestRoutingRules": "[concat(variables('httpsRequestRoutingRules'), if(empty(parameters('frontendHttpRedirects')), parameters('frontendHttpRedirects'), variables('httpRequestRoutingRules')))]",
    "identityType": "[if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None')]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2021-03-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "[parameters('sku')]",
          "tier": "[if(endsWith(parameters('sku'), 'v2'), parameters('sku'), substring(parameters('sku'), 0, indexOf(parameters('sku'), '_')))]",
          "capacity": "[parameters('capacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "[parameters('gatewayIpConfigurationName')]",
            "properties": {
              "subnet": {
                "id": "[variables('subnetResourceId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('frontendPrivateIPConfigurationName')]",
            "type": "Microsoft.Network/applicationGateways/frontendIPConfigurations",
            "properties": "[if(empty(parameters('frontendPrivateIpAddress')), variables('frontendPrivateIPDynamicConfiguration'), variables('frontendPrivateIPStaticConfiguration'))]"
          },
          {
            "name": "[variables('frontendPublicIPConfigurationName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[parameters('frontendPublicIpResourceId')]"
              }
            }
          }
        ],
        "sslCertificates": "[if(empty(parameters('sslCertificateKeyVaultSecretId')), null(), variables('sslCertificates'))]",
        "backendAddressPools": "[variables('backendAddressPools')]",
        "probes": "[variables('probes_var')]",
        "backendHttpSettingsCollection": "[variables('backendHttpConfigurations_var')]",
        "frontendPorts": "[variables('frontendPorts')]",
        "httpListeners": "[variables('httpListeners')]",
        "redirectConfigurations": "[variables('redirectConfigurations')]",
        "requestRoutingRules": "[variables('requestRoutingRules')]",
        "enableHttp2": "[parameters('http2Enabled')]",
        "firewallPolicy": {
          "id": "[parameters('firewallPolicyId')]"
        }
      }
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('name'))]",
      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
      "properties": {
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "workspaceId": "[if(empty(parameters('workspaceId')), null(), parameters('workspaceId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), null(), parameters('eventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('eventHubName')), null(), parameters('eventHubName'))]",
        "metrics": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), null(), variables('diagnosticsMetrics'))]",
        "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), empty(parameters('eventHubAuthorizationRuleId'))), empty(parameters('eventHubName'))), null(), variables('diagnosticsLogs'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "frontendPrivateIPDynamicConfiguration": {
      "type": "object",
      "value": "[variables('frontendPrivateIPDynamicConfiguration')]"
    },
    "frontendPrivateIPStaticConfiguration": {
      "type": "object",
      "value": "[variables('frontendPrivateIPStaticConfiguration')]"
    },
    "sslCertificates": {
      "type": "array",
      "value": "[variables('sslCertificates')]"
    },
    "frontendPorts": {
      "type": "array",
      "value": "[variables('frontendPorts')]"
    },
    "httpListeners": {
      "type": "array",
      "value": "[variables('httpListeners')]"
    },
    "redirectConfigurations": {
      "type": "array",
      "value": "[variables('redirectConfigurations')]"
    },
    "requestRoutingRules": {
      "type": "array",
      "value": "[variables('requestRoutingRules')]"
    },
    "backendAddressPools": {
      "type": "array",
      "value": "[variables('backendAddressPools')]"
    },
    "probes_var": {
      "type": "array",
      "value": "[variables('probes_var')]"
    },
    "backendHttpConfigurations_var": {
      "type": "array",
      "value": "[variables('backendHttpConfigurations_var')]"
    },
    "frontendHttpsPorts": {
      "type": "array",
      "value": "[variables('frontendHttpsPorts')]"
    },
    "frontendHttpsListeners_var": {
      "type": "array",
      "value": "[variables('frontendHttpsListeners_var')]"
    },
    "frontendHttpPorts": {
      "type": "array",
      "value": "[variables('frontendHttpPorts')]"
    },
    "frontendHttpListeners_var": {
      "type": "array",
      "value": "[variables('frontendHttpListeners_var')]"
    },
    "httpsRequestRoutingRules": {
      "type": "array",
      "value": "[variables('httpsRequestRoutingRules')]"
    },
    "frontendHttpRedirectPorts": {
      "type": "array",
      "value": "[variables('frontendHttpRedirectPorts')]"
    },
    "frontendHttpRedirects_var": {
      "type": "array",
      "value": "[variables('frontendHttpRedirects_var')]"
    },
    "httpRequestRoutingRules": {
      "type": "array",
      "value": "[variables('httpRequestRoutingRules')]"
    },
    "httpRedirectConfigurations": {
      "type": "array",
      "value": "[variables('httpRedirectConfigurations')]"
    },
    "applicationGatewayName": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the application gateway"
      }
    },
    "applicationGatewayResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the application gateway"
      }
    },
    "applicationGatewayResourceGroup": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group the application gateway was deployed into"
      }
    }
  }
}